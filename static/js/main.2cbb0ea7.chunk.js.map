{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","quote","author","isLoaded","fetch","then","res","json","result","randomNumber","Math","floor","random","setState","quotes","this","handleNewQuote","bind","animate","getRandomQuote","newGradient","randomGradiant","container","document","querySelector","classList","add","timeoutID","setTimeout","documentElement","style","setProperty","remove","clearTimeout","hexValues","populate","a","i","x","round","className","id","type","role","title","href","arget","rel","onClick","class","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+QA8IeA,E,kDA1Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,aACPC,OAAQ,aACRC,UAAU,GALK,E,qDASnB,WAAqB,IAAD,OAElBC,MAAM,0IACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IACIC,EAAeC,KAAKC,MADN,IACaD,KAAKE,SAAwB,GAC5D,EAAKC,SAAS,CACZZ,MAAOO,EAAOM,OAAOL,GAAcR,MACnCC,OAAQM,EAAOM,OAAOL,GAAcP,OACpCC,UAAU,OAIhBY,KAAKC,eAAiBD,KAAKC,eAAeC,KAAKF,Q,4BAKjD,WAGEA,KAAKG,UAGLH,KAAKI,mB,4BAIP,WAAkB,IAAD,OACff,MAAM,0IACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAEIC,EAAeC,KAAKC,MAAM,IAAAD,KAAKE,UADvB,EAEZ,EAAKC,SAAS,CACZZ,MAAOO,EAAOM,OAAOL,GAAcR,MACnCC,OAAQM,EAAOM,OAAOL,GAAcP,OACpCC,UAAU,S,qBAMlB,WAEE,IAAIiB,EAAcL,KAAKM,iBAMjBC,EAAYC,SAASC,cAAc,cAEzCF,EAAUG,UAAUC,IAAI,UAMxB,IAAIC,EAAYC,YAAW,WACzBL,SAASM,gBAAgBC,MAAMC,YAAY,wBAAyBX,GACpEE,EAAUG,UAAUO,OAAO,UAC3BC,aAAaN,KACZ,O,4BAGL,WAQE,IAAIO,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEjFC,EAAW,WAEf,IADA,IAAIC,EAAI,IACCC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAI5B,KAAK6B,MAAsB,GAAhB7B,KAAKE,UAExBwB,GADQF,EAAUI,GAGpB,OAAOF,GAMT,MAAO,0BAHSD,IAG0C,KAF1CA,IAE6D,M,oBAG/E,WACE,OAAKpB,KAAKf,MAAMG,SAYd,0BAASqC,UAAU,YAAnB,UACE,mBAAGA,UAAU,2BAA2BC,GAAG,OAA3C,SAAoD1B,KAAKf,MAAMC,QAC/D,oBAAGuC,UAAU,6BAA6BC,GAAG,SAA7C,cAAwD1B,KAAKf,MAAME,OAAnE,OACA,sBAAKsC,UAAU,UAAf,UACE,mBAAGA,UAAU,4BAA4BC,GAAG,cAAcC,KAAK,SAASC,KAAK,SAASC,MAAM,mBAC1FC,KAAI,oFAA+E9B,KAAKf,MAAMC,MAA1F,YAAmGc,KAAKf,MAAME,QAClH4C,MAAM,SACNC,IAAI,aAEN,wBAAQP,UAAU,2BAA2BC,GAAG,YAAYO,QAASjC,KAAKC,eAA1E,8BAlBF,qBAAKiC,MAAM,UAAX,SACE,sBAAKA,MAAM,YAAX,UACE,qBAAKA,MAAM,OAAX,qBACA,qBAAKA,MAAM,kB,GA/GLC,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BX,M","file":"static/js/main.2cbb0ea7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quote: \"loading...\",\r\n      author: \"loading...\",\r\n      isLoaded: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // get random qoute\r\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        const maxNumber = 103; /**there is only 103 english quotes */\r\n        let randomNumber = Math.floor((Math.random() * maxNumber) + 1);\r\n        this.setState({\r\n          quote: result.quotes[randomNumber].quote,\r\n          author: result.quotes[randomNumber].author,\r\n          isLoaded: true\r\n        })\r\n\r\n      });\r\n    this.handleNewQuote = this.handleNewQuote.bind(this);\r\n\r\n\r\n  }\r\n\r\n  handleNewQuote() {\r\n\r\n    // animate quote change\r\n    this.animate();\r\n\r\n    // get new random quotes\r\n    this.getRandomQuote();\r\n\r\n  }\r\n\r\n  getRandomQuote() {\r\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        const max = 102; /**there is only 102 english quotes */\r\n        const min = 1;\r\n        let randomNumber = Math.floor(Math.random() * (max - min)) + min;\r\n        this.setState({\r\n          quote: result.quotes[randomNumber].quote,\r\n          author: result.quotes[randomNumber].author,\r\n          isLoaded: true\r\n        });\r\n\r\n      });\r\n  }\r\n\r\n  animate() {\r\n\r\n    var newGradient = this.randomGradiant();\r\n\r\n\r\n    // toggle  change-quote animation\r\n\r\n    // get qoute container \r\n    const container = document.querySelector(\".quote-box\");\r\n\r\n    container.classList.add('change'); //animation class\r\n\r\n    // wait for the animation to finish to:\r\n    // 1-  change the background to the newGradient color\r\n    // 2- remove animation class (change) \r\n\r\n    let timeoutID = setTimeout(function () {\r\n      document.documentElement.style.setProperty('--main-gradient-color', newGradient);\r\n      container.classList.remove('change');\r\n      clearTimeout(timeoutID);\r\n    }, 1000);\r\n  }\r\n\r\n  randomGradiant() {\r\n    /**\r\n     * crate new random gradiant color and change the root variable\r\n     * source:\r\n     * https://codepen.io/chrisgresh/pen/aNjovb\r\n     * https://stackoverflow.com/questions/37801882/how-to-change-css-root-color-variables-in-javascript/37802204#37802204\r\n     *\r\n     */\r\n    var hexValues = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\"];\r\n\r\n    const populate = () => {\r\n      let a = '#';\r\n      for (var i = 0; i < 6; i++) {\r\n        var x = Math.round(Math.random() * 14);\r\n        var y = hexValues[x];\r\n        a += y;\r\n      }\r\n      return a;\r\n    };\r\n\r\n    var newColor1 = populate();\r\n    var newColor2 = populate();\r\n    var angle = 45;\r\n    return \"linear-gradient(\" + angle + \"deg, \" + newColor1 + \", \" + newColor2 + \")\";\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isLoaded) {\r\n\r\n      return (\r\n        <div class=\"loading\">\r\n          <div class=\"container\">\r\n            <div class=\"text\">loading</div>\r\n            <div class=\"ring\"></div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <section className=\"quote-box\">\r\n        <p className=\"gradient-text quote-text\" id=\"text\" >{this.state.quote}</p>\r\n        <p className=\"gradient-text quote-author\" id=\"author\">-{this.state.author} </p>\r\n        <div className=\"actions\">\r\n          <a className=\"gradient-bg btn btn-tweet\" id=\"tweet-quote\" type=\"button\" role=\"button\" title=\"Share on twitter\"\r\n            href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&url=${this.state.quote}-${this.state.author}`}\r\n            arget=\"_blank\"\r\n            rel=\"noopener\">\r\n          </a>\r\n          <button className=\"gradient-bg btn btn-next\" id=\"new-quote\" onClick={this.handleNewQuote}>Next Quote</button></div>\r\n      </section>\r\n      // .change\r\n    );\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}